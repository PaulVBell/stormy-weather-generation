"0","occ_fit_kfold_brms <- function(data, formula, priors, cores, iter = 2000, warmup = 1000, chains = 2, kfold_chains = 1){"
"0","  "
"0","  # Wrapper for fitting the occurrence brm model, performing k-fold cross validation and posterior predictions from the k-folds."
"0","  # Arguments: usual brm arguments and kfold_chains which determines how many chains to use for the k-fold cross validation."
"0","  # Value: a list of fit, the brm fit, y, the observations, and yrep, the k-fold cross validated posterior predictive samples."
"0","  "
"0","  fit <- brm("
"0","    formula = formula,"
"0","    family = bernoulli(link = ""logit""),"
"0","    data = data,"
"0","    prior = priors,"
"0","    iter = iter,"
"0","    warmup = warmup,"
"0","    chains = chains,"
"0","    cores = cores"
"0","  )"
"0","  gc(verbose = FALSE)"
"0","  "
"0","  folds = drop_na(data)$fold"
"0","  if(cores > 1){"
"0","    plan(multisession, workers = cores)"
"0","    fit_k_fold <- kfold(fit, chains = kfold_chains, folds = folds, save_fits = TRUE)"
"0","    plan(sequential)"
"0","  }"
"0","  if(cores == 1){"
"0","    fit_k_fold <- kfold(fit, chains = kfold_chains, folds = folds, save_fits = TRUE)"
"0","  }"
"0","  gc(verbose = FALSE)"
"0","  "
"0","  fit_p <- kfold_predict(fit_k_fold)"
"0","  gc(verbose = FALSE)"
"0","  "
"0","  list(fit = fit, y = fit_p$y, yrep = fit_p$yrep)"
"0","}"
